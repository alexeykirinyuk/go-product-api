// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package go_product_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GoProductApiServiceClient is the client API for GoProductApiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoProductApiServiceClient interface {
	DescribeProductV1(ctx context.Context, in *DescribeProductV1Request, opts ...grpc.CallOption) (*DescribeProductV1Response, error)
	CreateProductV1(ctx context.Context, in *CreateProductV1Request, opts ...grpc.CallOption) (*CreateProductV1Response, error)
	ListProductsV1(ctx context.Context, in *ListProductsV1Request, opts ...grpc.CallOption) (*ListProductsV1Response, error)
	RemoveProductV1(ctx context.Context, in *RemoveProductV1Request, opts ...grpc.CallOption) (*RemoveProductV1Response, error)
}

type goProductApiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGoProductApiServiceClient(cc grpc.ClientConnInterface) GoProductApiServiceClient {
	return &goProductApiServiceClient{cc}
}

func (c *goProductApiServiceClient) DescribeProductV1(ctx context.Context, in *DescribeProductV1Request, opts ...grpc.CallOption) (*DescribeProductV1Response, error) {
	out := new(DescribeProductV1Response)
	err := c.cc.Invoke(ctx, "/ozonmp.go_product_api.v1.GoProductApiService/DescribeProductV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goProductApiServiceClient) CreateProductV1(ctx context.Context, in *CreateProductV1Request, opts ...grpc.CallOption) (*CreateProductV1Response, error) {
	out := new(CreateProductV1Response)
	err := c.cc.Invoke(ctx, "/ozonmp.go_product_api.v1.GoProductApiService/CreateProductV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goProductApiServiceClient) ListProductsV1(ctx context.Context, in *ListProductsV1Request, opts ...grpc.CallOption) (*ListProductsV1Response, error) {
	out := new(ListProductsV1Response)
	err := c.cc.Invoke(ctx, "/ozonmp.go_product_api.v1.GoProductApiService/ListProductsV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goProductApiServiceClient) RemoveProductV1(ctx context.Context, in *RemoveProductV1Request, opts ...grpc.CallOption) (*RemoveProductV1Response, error) {
	out := new(RemoveProductV1Response)
	err := c.cc.Invoke(ctx, "/ozonmp.go_product_api.v1.GoProductApiService/RemoveProductV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoProductApiServiceServer is the server API for GoProductApiService service.
// All implementations must embed UnimplementedGoProductApiServiceServer
// for forward compatibility
type GoProductApiServiceServer interface {
	DescribeProductV1(context.Context, *DescribeProductV1Request) (*DescribeProductV1Response, error)
	CreateProductV1(context.Context, *CreateProductV1Request) (*CreateProductV1Response, error)
	ListProductsV1(context.Context, *ListProductsV1Request) (*ListProductsV1Response, error)
	RemoveProductV1(context.Context, *RemoveProductV1Request) (*RemoveProductV1Response, error)
	mustEmbedUnimplementedGoProductApiServiceServer()
}

// UnimplementedGoProductApiServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGoProductApiServiceServer struct {
}

func (UnimplementedGoProductApiServiceServer) DescribeProductV1(context.Context, *DescribeProductV1Request) (*DescribeProductV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeProductV1 not implemented")
}
func (UnimplementedGoProductApiServiceServer) CreateProductV1(context.Context, *CreateProductV1Request) (*CreateProductV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProductV1 not implemented")
}
func (UnimplementedGoProductApiServiceServer) ListProductsV1(context.Context, *ListProductsV1Request) (*ListProductsV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProductsV1 not implemented")
}
func (UnimplementedGoProductApiServiceServer) RemoveProductV1(context.Context, *RemoveProductV1Request) (*RemoveProductV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveProductV1 not implemented")
}
func (UnimplementedGoProductApiServiceServer) mustEmbedUnimplementedGoProductApiServiceServer() {}

// UnsafeGoProductApiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoProductApiServiceServer will
// result in compilation errors.
type UnsafeGoProductApiServiceServer interface {
	mustEmbedUnimplementedGoProductApiServiceServer()
}

func RegisterGoProductApiServiceServer(s grpc.ServiceRegistrar, srv GoProductApiServiceServer) {
	s.RegisterService(&GoProductApiService_ServiceDesc, srv)
}

func _GoProductApiService_DescribeProductV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeProductV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoProductApiServiceServer).DescribeProductV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ozonmp.go_product_api.v1.GoProductApiService/DescribeProductV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoProductApiServiceServer).DescribeProductV1(ctx, req.(*DescribeProductV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoProductApiService_CreateProductV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoProductApiServiceServer).CreateProductV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ozonmp.go_product_api.v1.GoProductApiService/CreateProductV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoProductApiServiceServer).CreateProductV1(ctx, req.(*CreateProductV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoProductApiService_ListProductsV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProductsV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoProductApiServiceServer).ListProductsV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ozonmp.go_product_api.v1.GoProductApiService/ListProductsV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoProductApiServiceServer).ListProductsV1(ctx, req.(*ListProductsV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoProductApiService_RemoveProductV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveProductV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoProductApiServiceServer).RemoveProductV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ozonmp.go_product_api.v1.GoProductApiService/RemoveProductV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoProductApiServiceServer).RemoveProductV1(ctx, req.(*RemoveProductV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

// GoProductApiService_ServiceDesc is the grpc.ServiceDesc for GoProductApiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoProductApiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ozonmp.go_product_api.v1.GoProductApiService",
	HandlerType: (*GoProductApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DescribeProductV1",
			Handler:    _GoProductApiService_DescribeProductV1_Handler,
		},
		{
			MethodName: "CreateProductV1",
			Handler:    _GoProductApiService_CreateProductV1_Handler,
		},
		{
			MethodName: "ListProductsV1",
			Handler:    _GoProductApiService_ListProductsV1_Handler,
		},
		{
			MethodName: "RemoveProductV1",
			Handler:    _GoProductApiService_RemoveProductV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "alexeykirinyuk/go_product_api/v1/go_product_api.proto",
}
